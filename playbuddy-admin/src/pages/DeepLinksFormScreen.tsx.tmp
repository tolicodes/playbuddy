// src/pages/DeepLinkFormScreen.tsx
import React, { useState, useEffect } from 'react'
import { useParams } from 'react-router-dom'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import axios from 'axios'
import { useFetchOrganizers } from '../common/db-axios/useOrganizers';
import {
    useAddDeepLink,
    useUpdateDeepLink,
    useFetchDeepLinks
} from '../common/db-axios/useDeepLinks'
import { useFetchEvents } from '../common/db-axios/useEvents'
import { useCreatePromoCode, useFetchPromoCodes } from '../common/db-axios/usePromoCodes'
import { Organizer, Event, PromoCode, DeepLink } from '../common/types/commonTypes'
import { API_BASE_URL } from '../common/config';

const getPromoCodesByOrganizer = (allPromoCodes: PromoCode[], organizerId: number) => {
    return allPromoCodes.filter(promoCode => promoCode.organizer_id === organizerId)
}

// ─── Main Component: form for create or edit ─────────────────────────────────
export default function DeepLinkFormScreen() {
    const { id } = useParams<{ id?: string }>()
    const isEditMode = Boolean(id)

    // 1) Fetch organizers & events
    const {
        data: organizers = [],
        isLoading: loadingOrgs,
        error: errorOrgs,
    } = useFetchOrganizers()

    const {
        data: events,
        isLoading: loadingEvents,
        error: errorEvents,
    } = useFetchEvents()

    const {
        data: allPromoCodes = [],
        isLoading: loadingPromoCodes,
        error: errorPromoCodes,
    } = useFetchPromoCodes()

    // 2) Fetch existing deep link if editing
    const {
        data: existingDLs,
        isLoading: loadingDLs,
        error: errorDLs,
    } = useFetchDeepLinks()

    const existingDL = existingDLs?.find(dl => dl.id === id)

    // 3) Form state
    const [shortTitle, setShortTitle] = useState<string>('')
    const [selectedOrganizerId, setSelectedOrganizerId] = useState<number | null>(null)
    const [selectedEventId, setSelectedEventId] = useState<number | null>(null)
    const [promoCodeMode, setPromoCodeMode] = useState<'existing' | 'new'>('existing')
    const [existingPromoId, setExistingPromoId] = useState<string>('')
    const [newPromoCodeText, setNewPromoCodeText] = useState<string>('')
    const [newPromoDiscount, setNewPromoDiscount] = useState<number>(0)
    const [campaignDate, setCampaignDate] = useState<string>('')
    const [channel, setChannel] = useState<string>('')

    // 4) Fetch promo codes for this organizer
    const promoCodesForThisOrganizer = getPromoCodesByOrganizer(allPromoCodes, selectedOrganizerId)

    // 5) Filter events by organizer
    const eventsForThisOrganizer = events?.filter(
        (ev) => ev.organizer.id === selectedOrganizerId
    )

    // 6) Mutations
    const createPromoMutation = useCreatePromoCode()
    const addDeepLinkMutation = useAddDeepLink()
    const updateDeepLinkMutation = useUpdateDeepLink()
    const queryClient = useQueryClient()

    // 7) Populate form when existingDL loads
    useEffect(() => {
        if (existingDLs) {
            const existingDL = existingDLs.find(dl => dl.id === id)
            if (existingDL) {
                setShortTitle(existingDL.name)
                setSelectedOrganizerId(existingDL.organizer?.id ?? null)
                setSelectedEventId(existingDL.featured_event?.id ?? null)
                if (existingDL.featured_promo_code) {
                    setPromoCodeMode('existing')
                    setExistingPromoId(existingDL.featured_promo_code.id)
                } else {
                    setPromoCodeMode('new')
                }
                // setCampaignDate(existingDL.campaign ?? '')
                // setChannel(existingDL.channel ?? '')
            }
        }
    }, [existingDLs, id])

    // 8) Submit handler
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault()

        if (!shortTitle.trim()) {
            alert('Please enter Short Title')
            return
        }
        if (selectedOrganizerId === null) {
            alert('Please select an Organizer')
            return
        }
        if (selectedEventId === null) {
            alert('Please select an Event')
            return
        }
        if (promoCodeMode === 'existing' && !existingPromoId) {
            alert('Please select an existing Promo Code or switch to "New Code"')
            return
        }
        if (promoCodeMode === 'new') {
            if (!newPromoCodeText.trim()) {
                alert('Enter a new Promo Code text')
                return
            }
            if (newPromoDiscount <= 0) {
                alert('Discount must be greater than 0')
                return
            }
        }
        if (!campaignDate) {
            alert('Please select a Campaign Date')
            return
        }
        if (!channel.trim()) {
            alert('Please enter a Channel')
            return
        }

        try {
            let finalPromoId: string

            // 8a) If “new code” → create promo first
            if (promoCodeMode === 'new') {
                const createdPromo = await createPromoMutation.mutateAsync({
                    organizer_id: selectedOrganizerId,
                    promo_code: newPromoCodeText.trim(),
                    discount: newPromoDiscount,
                    discount_type: 'percent',
                    scope: 'organizer',
                })
                finalPromoId = createdPromo.id
            } else {
                finalPromoId = existingPromoId
            }

            // 8b) Build payload
            const payload = {
                name: shortTitle.trim(),
                organizer_id: selectedOrganizerId,
                featured_event_id: selectedEventId,
                featured_promo_code_id: finalPromoId,
                campaign_date: campaignDate,
                channel: channel.trim(),
            }

            // 8c) Call add or update
            if (isEditMode && id) {
                await updateDeepLinkMutation.mutateAsync({ id, ...payload } as DeepLink)
                queryClient.invalidateQueries(['deepLinks'])
                alert('Deep Link updated successfully')
            } else {
                await addDeepLinkMutation.mutateAsync(payload as DeepLink)
                queryClient.invalidateQueries(['deepLinks'])
                alert('Deep Link created successfully')
            }

            history.push('/deep-links')
        } catch (err) {
            console.error(err)
            alert('Error saving Deep Link; see console for details.')
        }
    }

    // 9) Early returns for loading/error
    if (loadingOrgs || loadingEvents || (isEditMode && loadingDL))
        return <p>Loading…</p>
    if (errorOrgs) return <p>Error loading organizers.</p>
    if (errorEvents) return <p>Error loading events.</p>
    if (selectedOrganizerId !== null && loadingPromos) return <p>Loading promo codes…</p>
    if (errorPromos) return <p>Error loading promo codes.</p>
    if (isEditMode && errorDL) return <p>Error loading Deep Link.</p>

    return (
        <div style={{ padding: '2rem', maxWidth: 600 }}>
            <h2 style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>
                {isEditMode ? 'Edit Deep Link' : 'Add Deep Link'}
            </h2>

            <form onSubmit={handleSubmit} style={{ display: 'grid', gap: '1rem' }}>
                {/* Short Title */}
                <label style={{ display: 'flex', flexDirection: 'column' }}>
                    Short Title
                    <input
                        type="text"
                        value={shortTitle}
                        onChange={(e) => setShortTitle(e.target.value)}
                        style={{ padding: '0.5rem', fontSize: '1rem' }}
                    />
                </label>

                {/* Organizer */}
                <label style={{ display: 'flex', flexDirection: 'column' }}>
                    Organizer
                    <select
                        value={selectedOrganizerId ?? ''}
                        onChange={(e) => {
                            const idNum = e.target.value ? Number(e.target.value) : null
                            setSelectedOrganizerId(idNum)
                            setSelectedEventId(null)
                            setExistingPromoId('')
                            setPromoCodeMode('existing')
                        }}
                        style={{ padding: '0.5rem', fontSize: '1rem' }}
                    >
                        <option value="">— Select Organizer —</option>
                        {organizers.map((org: Organizer) => (
                            <option key={org.id} value={org.id}>
                                {org.name}
                            </option>
                        ))}
                    </select>
                </label>

                {/* Event (filtered by organizer) */}
                <label style={{ display: 'flex', flexDirection: 'column' }}>
                    Event
                    <select
                        value={selectedEventId ?? ''}
                        onChange={(e) => setSelectedEventId(Number(e.target.value))}
                        disabled={selectedOrganizerId === null}
                        style={{ padding: '0.5rem', fontSize: '1rem' }}
                    >
                        <option value="">— Select Event —</option>
                        {eventsForThisOrganizer.map((ev: Event) => (
                            <option key={ev.id} value={ev.id}>
                                {ev.name}
                            </option>
                        ))}
                    </select>
                </label>

                {/* Promo Code: existing vs new */}
                <fieldset style={{ border: '1px solid #ccc', padding: '1rem' }}>
                    <legend style={{ fontWeight: 600 }}>Promo Code</legend>
                    <label style={{ marginBottom: '0.5rem' }}>
                        <input
                            type="radio"
                            name="promoMode"
                            value="existing"
                            checked={promoCodeMode === 'existing'}
                            onChange={() => setPromoCodeMode('existing')}
                            disabled={selectedOrganizerId === null}
                        />{' '}
                        Use Existing Code
                    </label>
                    <label>
                        <input
                            type="radio"
                            name="promoMode"
                            value="new"
                            checked={promoCodeMode === 'new'}
                            onChange={() => {
                                setPromoCodeMode('new')
                                setExistingPromoId('')
                            }}
                            disabled={selectedOrganizerId === null}
                        />{' '}
                        Create New Code
                    </label>

                    {promoCodeMode === 'existing' && (
                        <div style={{ marginTop: '0.5rem' }}>
                            <select
                                value={existingPromoId}
                                onChange={(e) => setExistingPromoId(e.target.value)}
                                disabled={promoCodes.length === 0}
                                style={{ padding: '0.5rem', fontSize: '1rem', width: '100%' }}
                            >
                                <option value="">— Select Promo Code —</option>
                                {promoCodes.map((pc: PromoCode) => (
                                    <option key={pc.id} value={pc.id}>
                                        {pc.promo_code} ({pc.discount_type === 'percent'
                                            ? `${pc.discount}%`
                                            : `$${pc.discount.toFixed(2)}`})
                                    </option>
                                ))}
                            </select>
                        </div>
                    )}

                    {promoCodeMode === 'new' && (
                        <div style={{ marginTop: '0.5rem', display: 'grid', gap: '0.5rem' }}>
                            <input
                                type="text"
                                placeholder="New code (e.g. SPRING25)"
                                value={newPromoCodeText}
                                onChange={(e) => setNewPromoCodeText(e.target.value)}
                                style={{ padding: '0.5rem', fontSize: '1rem', width: '100%' }}
                            />
                            <input
                                type="number"
                                placeholder="Discount % (e.g. 25)"
                                value={newPromoDiscount.toString()}
                                onChange={(e) => setNewPromoDiscount(Number(e.target.value))}
                                min={1}
                                max={100}
                                style={{ padding: '0.5rem', fontSize: '1rem', width: '100%' }}
                            />
                        </div>
                    )}
                </fieldset>

                {/* Campaign Date */}
                <label style={{ display: 'flex', flexDirection: 'column' }}>
                    Campaign Date
                    <input
                        type="date"
                        value={campaignDate}
                        onChange={(e) => setCampaignDate(e.target.value)}
                        style={{ padding: '0.5rem', fontSize: '1rem' }}
                    />
                </label>

                {/* Channel */}
                <label style={{ display: 'flex', flexDirection: 'column' }}>
                    Channel (e.g. “Toli Whatsapp”)
                    <input
                        type="text"
                        value={channel}
                        onChange={(e) => setChannel(e.target.value)}
                        style={{ padding: '0.5rem', fontSize: '1rem' }}
                    />
                </label>

                {/* Submit */}
                <button
                    type="submit"
                    onClick={handleSubmit}
                    style={{
                        marginTop: '1rem',
                        padding: '0.75rem 1.5rem',
                        fontSize: '1rem',
                        backgroundColor: '#3b82f6',
                        color: 'white',
                        border: 'none',
                        borderRadius: 4,
                        cursor: 'pointer',
                    }}
                    disabled={
                        addDeepLinkMutation.isLoading ||
                        updateDeepLinkMutation.isLoading ||
                        createPromoMutation.isLoading
                    }
                >
                    {isEditMode
                        ? updateDeepLinkMutation.isLoading
                            ? 'Updating…'
                            : 'Update Deep Link'
                        : addDeepLinkMutation.isLoading
                            ? 'Creating…'
                            : 'Create Deep Link'}
                </button>
            </form>
        </div>
    )
}
